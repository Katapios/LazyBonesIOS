import XCTest
@testable import LazyBones

/// –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫
class VoiceRecorderTests: XCTestCase {
    
    func testPostWithMultipleVoiceNotes() {
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏
        let post = Post(
            id: UUID(),
            date: Date(),
            goodItems: ["–¢–µ—Å—Ç —Ö–æ—Ä–æ—à–∏–π"],
            badItems: ["–¢–µ—Å—Ç –ø–ª–æ—Ö–æ–π"],
            published: true,
            voiceNotes: [
                VoiceNote(id: UUID(), path: "/test/path/voice1.m4a"),
                VoiceNote(id: UUID(), path: "/test/path/voice2.m4a")
            ],
            type: .regular
        )
        XCTAssertEqual(post.voiceNotes.count, 2)
        XCTAssertEqual(post.voiceNotes[0].path, "/test/path/voice1.m4a")
        XCTAssertEqual(post.voiceNotes[1].path, "/test/path/voice2.m4a")
    }
    
    func testAddAndRemoveVoiceNote() {
        var post = Post(
            id: UUID(),
            date: Date(),
            goodItems: [],
            badItems: [],
            published: false,
            voiceNotes: [],
            type: .regular
        )
        let note1 = VoiceNote(id: UUID(), path: "/test/path/voice1.m4a")
        let note2 = VoiceNote(id: UUID(), path: "/test/path/voice2.m4a")
        post.voiceNotes.append(note1)
        XCTAssertEqual(post.voiceNotes.count, 1)
        post.voiceNotes.append(note2)
        XCTAssertEqual(post.voiceNotes.count, 2)
        post.voiceNotes.remove(at: 0)
        XCTAssertEqual(post.voiceNotes.count, 1)
        XCTAssertEqual(post.voiceNotes[0].path, "/test/path/voice2.m4a")
    }
    
    func testDeviceNameRetrieval() {
        let store = PostStore()
        let deviceName = store.getDeviceName()
        // –í —Ç–µ—Å—Ç–∞—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        XCTAssertTrue(deviceName == "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" || !deviceName.isEmpty)
    }
    
    func testTelegramMessageFormatWithMultipleVoiceNotes() {
        let post = Post(
            id: UUID(),
            date: Date(),
            goodItems: ["–ü—É–Ω–∫—Ç 1", "–ü—É–Ω–∫—Ç 2"],
            badItems: ["–ü—É–Ω–∫—Ç 3"],
            published: true,
            voiceNotes: [
                VoiceNote(id: UUID(), path: "/test/voice1.m4a"),
                VoiceNote(id: UUID(), path: "/test/voice2.m4a")
            ],
            type: .regular
        )
        let store = PostStore()
        let deviceName = store.getDeviceName()
        let dateFormatter = DateFormatter()
        dateFormatter.locale = Locale(identifier: "ru_RU")
        dateFormatter.dateStyle = .full
        let dateStr = dateFormatter.string(from: post.date)
        let expectedMessage = """
        üìÖ <b>–û—Ç—á—ë—Ç –∑–∞ \(dateStr)</b>
        üì± <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \(deviceName)</b>
        
        <b>–Ø –º–æ–ª–æ–¥–µ—Ü:</b>
        ‚Ä¢ –ü—É–Ω–∫—Ç 1
        ‚Ä¢ –ü—É–Ω–∫—Ç 2
        
        <b>–Ø –Ω–µ –º–æ–ª–æ–¥–µ—Ü:</b>
        ‚Ä¢ –ü—É–Ω–∫—Ç 3
        
        üé§ <i>–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞</i>
        """
        XCTAssertTrue(expectedMessage.contains("üìÖ"))
        XCTAssertTrue(expectedMessage.contains("üì±"))
        XCTAssertTrue(expectedMessage.contains("üé§"))
        XCTAssertTrue(expectedMessage.contains("–Ø –º–æ–ª–æ–¥–µ—Ü:"))
        XCTAssertTrue(expectedMessage.contains("–Ø –Ω–µ –º–æ–ª–æ–¥–µ—Ü:"))
    }
} 