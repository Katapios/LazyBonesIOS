import SwiftUI

/// –ù–æ–≤—ã–π MainView —Å Clean Architecture
struct MainViewNew: View {
    @StateObject private var viewModel: MainViewModelNew
    @Environment(\.colorScheme) var colorScheme
    @EnvironmentObject var appCoordinator: AppCoordinator
    
    init() {
        let container = DependencyContainer.shared
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let getReportsUseCase = container.resolve(GetReportsUseCase.self)!
        let updateStatusUseCase = container.resolve(UpdateStatusUseCase.self)!
        let settingsRepository = container.resolve(SettingsRepositoryProtocol.self)!
        let timerService = container.resolve(PostTimerServiceProtocol.self)!
        
        self._viewModel = StateObject(wrappedValue: MainViewModelNew(
            getReportsUseCase: getReportsUseCase,
            updateStatusUseCase: updateStatusUseCase,
            settingsRepository: settingsRepository,
            timerService: timerService
        ))
    }

    var body: some View {
        VStack(spacing: 14) {
            MainStatusBarViewNew(viewModel: viewModel)
            MercuryThermometerView(goodCount: viewModel.state.goodCountToday, badCount: viewModel.state.badCountToday)
            LargeButtonView(
                title: viewModel.state.buttonTitle,
                icon: viewModel.state.buttonIcon,
                color: viewModel.state.buttonColor,
                action: { 
                    appCoordinator.switchToTab(.planning)
                },
                isEnabled: viewModel.state.canEditReport
            )
            .padding(.horizontal)
            .padding(.vertical, 40)
        }
        .padding(.vertical, 16)
        .frame(maxHeight: .infinity, alignment: .center)
        .padding()
        .onAppear {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
            Task {
                await viewModel.handle(.loadData)
            }
        }
        .onChange(of: Calendar.current.startOfDay(for: Date())) { oldDay, newDay in
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è
            Task {
                await viewModel.handle(.checkForNewDay)
            }
        }
        .overlay {
            if viewModel.state.isLoading {
                ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞...")
                    .background(Color.black.opacity(0.3))
            }
        }
        .alert("–û—à–∏–±–∫–∞", isPresented: .constant(viewModel.state.error != nil)) {
            Button("OK") {
                Task {
                    await viewModel.handle(.clearError)
                }
            }
        } message: {
            Text(viewModel.state.error?.localizedDescription ?? "")
        }
    }
}

/// –ù–æ–≤—ã–π MainStatusBarView, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ViewModel –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
struct MainStatusBarViewNew: View {
    @ObservedObject var viewModel: MainViewModelNew
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        VStack(spacing: 30) {
            Text("–ü—Ä–∏–≤–µ—Ç,")
                .font(.headline)
                .fontWeight(.semibold)
                .font(.title2)
            VStack {
                Text("ùï∑ùñÜùñá: üÖû'ùñôùñóùüóùñà")
                    .foregroundColor(colorScheme == .dark ? .black : .white)
            }
            .font(.custom("Georgia-Bold", size: 35))
            .kerning(1)
            .padding()
            .background(
                Capsule()
                    .fill(
                        colorScheme == .dark
                            ? Color.white : Color(.black).opacity(0.85)
                    )
            )
            .foregroundStyle(.white)
            HStack(spacing: 8) {
                Text(viewModel.state.reportStatusText)
                    .font(.title2)
                    .foregroundColor(viewModel.state.reportStatusColor)
            }
            .font(.headline)
            .fontWeight(.semibold)
            .font(.title2)
            GradientRingTimerView(
                progress: viewModel.state.timeProgress,
                timeText: viewModel.state.timerTimeTextOnly,
                label: viewModel.state.timerLabel,
                ringSize: 150,
                ringLineWidth: 15,
                timeFontSize: 24,
                labelFontSize: 15
            )
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 8)
        .onAppear {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏
            Task {
                await viewModel.handle(.checkForNewDay)
            }
        }
        .onChange(of: Calendar.current.startOfDay(for: Date())) { oldDay, newDay in
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è
            Task {
                await viewModel.handle(.checkForNewDay)
            }
        }
    }
}

#Preview {
    MainViewNew()
        .environmentObject(AppCoordinator(dependencyContainer: DependencyContainer.shared))
} 